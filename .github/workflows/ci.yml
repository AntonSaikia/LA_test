name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: eng_deu_vocab
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -p$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # --- FIX START: Install Playwright System Dependencies ---
      # Update apt-get and install recommended Playwright dependencies for Ubuntu
      - name: Install Playwright system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1 \
            libfreetype6 \
            libharfbuzz0b \
            libice6 \
            libsm6 \
            libx11-6 \
            libxext6 \
            libxrandr2 \
            libxrender1 \
            libxtst6 \
            libasound2 \
            libglib2.0-0 \
            libnss3 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libgbm1 \
            libgconf-2-4 \
            libgtk-3-0 \
            libnspr4 \
            libnotify4 \
            libpng16-16 \
            libsecret-1-0 \
            libsqlite3-0 \
            libuuid1 \
            libwebp6 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxi6 \
            libxss1 \
            libxcursor1 \
            libxkbcommon0 \
            libxshmfence1 \
            libxtst6 \
            xdg-utils \
            procps \
            # The following might be the problematic ones or their newer versions
            # libffi7 might be libffi8 on newer Ubuntu versions. Playwright usually handles this.
            # libx264 is typically replaced by newer versions like libx264-164 or similar.
            # Including a broad set should cover the bases.
            # If `libffi7` explicitly fails, `libffi-dev` might be needed for development packages.
            # For `libx264-163`, installing `ffmpeg` or `libavcodec-extra` might provide underlying deps.
            # However, Playwright's default "install" command tries to get these.
            # It's better to install the broader list first.
          echo "Playwright system dependencies installed."
      # --- FIX END: Install Playwright System Dependencies ---

      - name: Install Playwright Browsers
        run: mvn -f tests/java/pom.xml exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps"

      - name: Wait for MySQL service
        run: |
          echo "Waiting for MySQL service to be ready..."
          for i in $(seq 1 60); do
            if nc -z mysql 3306; then
              echo "MySQL is up!"
              break
            fi
            echo -n "."
            sleep 1
          done
          echo ""
          nc -z mysql 3306 || { echo "MySQL service failed to start!"; exit 1; }

      - name: Prepare Database Schema and Data
        run: |
          echo "Applying database schema..."
          mysql -h mysql -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" < database/schema.sql
          echo "Seeding database with initial data..."
          mysql -h mysql -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" eng_deu_vocab < database/seed_data.sql
          echo "Database prepared."

      - name: Start PHP-Apache container
        run: |
          echo "Starting PHP-Apache container..."
          docker run -d --name php-apache \
            -p 80:80 \
            -e DB_HOST=host.docker.internal \
            -e DB_USER=root \
            -e DB_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            -e DB_NAME=eng_deu_vocab \
            -v ${{ github.workspace }}/backend/api:/var/www/html/api \
            -v ${{ github.workspace }}/frontend:/var/www/html/frontend \
            php:8.2-apache
          echo "PHP-Apache container started."

      - name: Wait for PHP-Apache to be ready
        run: |
          echo "Waiting for PHP-Apache to be reachable via HTTP on localhost:80..."
          for i in $(seq 1 60); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/get_words.php)
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "PHP-Apache /api/get_words.php is reachable ($HTTP_CODE)."
              RESPONSE=$(curl -s http://localhost/api/get_words.php)
              if echo "$RESPONSE" | grep -q "Hello"; then
                echo "API returned expected content."
                break
              fi
            fi
            echo -n "."
            sleep 1
          done
          echo ""
          curl --fail http://localhost/api/get_words.php || { echo "PHP-Apache API failed to respond with expected content!"; exit 1; }
          echo "All services are ready for Playwright tests."

      - name: Run Playwright Tests
        run: |
          mvn -f tests/java/pom.xml test \
            -Dfrontend.base.path=/frontend/ \
            -Dapi.base.path=/api/

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: trace-*.zip
          retention-days: 7

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: tests/java/target/surefire-reports/

      - name: Collect Docker container logs
        if: always()
        run: |
          echo "Collecting logs for PHP-Apache container..."
          docker logs php-apache > php-apache-logs.txt || echo "php-apache container logs not found."
          echo "Collecting logs for MySQL service container..."
          MYSQL_SVC_CONTAINER_ID=$(docker ps -aq --filter "name=build_mysql")
          if [ -n "$MYSQL_SVC_CONTAINER_ID" ]; then
            docker logs $MYSQL_SVC_CONTAINER_ID > mysql-service-logs.txt
          else
            echo "MySQL service container not found for log collection."
          fi
          echo "Container logs collected."

      - name: Upload collected logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-logs
          path: |
            php-apache-logs.txt
            mysql-service-logs.txt
          retention-days: 7