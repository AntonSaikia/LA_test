# .github/workflows/ci.yml
name: LA_test CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: eng_deu_vocab
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -p${MYSQL_ROOT_PASSWORD}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: Install required dependencies for Playwright
      run: |
	sudo sed -i 's|http://.*.ubuntu.com|http://archive.ubuntu.com|g' /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install -y \
          libasound2 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libcups2 \
          libdbus-1-3 \
          libdrm2 \
          libgbm1 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libx11-xcb1 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          xdg-utils \
          libxshmfence1 \
          libxss1 \
          libasound2 \
          fonts-liberation \
          libappindicator3-1 \
          libffi8 \
          wget \
          curl \
          ca-certificates \
          libx264-dev \
          libglib2.0-0 \
          libjpeg-dev \
          libvpx-dev

    - name: Install Playwright Browsers
      run: mvn -f tests/java/pom.xml exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps"


    - name: Install Playwright Browsers
      run: mvn -f tests/java/pom.xml exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps"

    - name: Wait for MySQL service
      run: |
        echo "Waiting for MySQL service..."
        for i in {1..60}; do
          if mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} --silent; then
            echo "MySQL is up!"
            break
          fi
          echo -n "."
          sleep 1
        done

    - name: Start PHP-Apache container
      run: |
        docker run -d --name php-apache \
          -p 80:80 \
          -e DB_HOST=host.docker.internal \
          -e DB_USER=root \
          -e DB_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
          -e DB_NAME=eng_deu_vocab \
          -v ${{ github.workspace }}/backend/api:/var/www/html/api \
          -v ${{ github.workspace }}/frontend:/var/www/html/frontend \
          php:8.2-apache

    - name: Wait for PHP-Apache to be healthy
      run: |
        echo "Waiting for PHP-Apache..."
        for i in {1..60}; do
          if curl --fail http://localhost/api/get_words.php; then
            echo "PHP-Apache is up!"
            break
          fi
          echo -n "."
          sleep 1
        done

    - name: Prepare Database Schema and Data
      run: |
        mysql -h 127.0.0.1 -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} < database/schema.sql
        mysql -h 127.0.0.1 -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} eng_deu_vocab < database/seed_data.sql

    - name: Run Playwright Tests
      run: |
        mvn -f tests/java/pom.xml test \
          -Dfrontend.base.path=/frontend/ \
          -Dapi.base.path=/api/

    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results
        path: tests/java/target/surefire-reports
